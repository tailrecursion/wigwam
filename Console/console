<?php
// vim: ft=php
//

use Wigwam\Console\HistArray;

error_reporting(0);

// Parse .htaccess files

$init = function() {
  $setini = function($line) {
    $patt  = '/^\s*php_(?:admin_)?value\s+([^\s]+)\s+([^\s].*)$/';

    if (! preg_match($patt, trim($line), $m))
      return;

    $k = $m[1];
    $v = $m[2];

    if ($v[0] == '"' && $v[strlen($v)-1] == '"')
      $v = substr($v, 1, strlen($v)-2);

    ini_set($k, $v);
  };

  $option = getopt('c:f:i:j:Jp:v:hHqs:z');
  $depth  = count(explode("/", getcwd())) - 1;

  if (! isset($option['H'])) {
    for ($i=0; $i<$depth; $i++) {
      $file = str_repeat("../", $i).".htaccess";

      if (! file_exists($file))
        continue;

      $lines = file($file);

      foreach ($lines as $line)
        $setini($line);
    }
  }

  if (isset($option['i'])) {
    if (! is_array($option['i']))
      $option['i'] = array($option['i']);
    foreach($option['i'] as $set)
      $setini(preg_replace('/^([^=]+)=/', 'php_value $1 ', $set));
  }

  if (isset($option['p'])) {
    if (! is_array($option['p']))
      $option['p'] = array($option['p']);
    foreach($option['p'] as $pre)
      require_once($pre);
  }
};

$init();

unset($init);

ini_set('error_log', '');

putenv('WIGWAM_CONSOLE=true');

use Wigwam\ClassLoader;
use Wigwam\Console\Console;
use Wigwam\Console\ConsoleCommand;

if (! class_exists('Wigwam\\ClassLoader'))
  require_once('Wigwam/ClassLoader.php');


Console::$printers['ArrayIterator'] = function($o) {
  return sprintf(
    "#<%s %s>",
    get_class($o),
    Console::pp($o->getArrayCopy()));
};

Console::$printers['ReflectionProperty'] =
Console::$printers['ReflectionMethod'] = function($o) {
  return sprintf(
    "#<%s %s::%s>",
    get_class($o),
    $o->getDeclaringClass()->getName(),
    $o->getName());
};

Console::$printers['ReflectionFunction'] =
Console::$printers['ReflectionClass'] = function($o) {
  return sprintf(
    "#<%s %s>",
    get_class($o),
    $o->getName());
};

Console::$printers['Exception'] = function($o) {
  return sprintf(
    "#<%s %s>",
    get_class($o),
    $o->getMessage());
};

Console::$printers['Wigwam\\Exception'] = function($o) {
  return sprintf(
    "#<%s %s %s>",
    get_class($o),
    $o->getMessage(),
    Console::pp($o->getData()));
};

Console::$printers['DateTime'] = function($o) {
  return sprintf("#<%s %s>", get_class($o), $o->format('c'));
};

// This is just a unique thing that will never be === to any result.
Console::$no_result  = new DateTime('1900-01-01');

Console::$HISTFILE_S = $_SERVER['HOME']."/.console.php.history.session";

Console::setup();

Console::$option = getopt('c:f:i:p:v:hHqs:z');

if (isset(Console::$option['z']))
  Console::$INTERACTIVE = false;

if (isset(Console::$option['h'])) {
  ConsoleCommand::h('');
  exit();
}

if (isset(Console::$option['s'])) {
  if (is_array(Console::$option['s']))
    Console::$option['s'] = array_pop(Console::$option['s']);
  if (file_exists(Console::$option['s'])) {
    Console::$SCRIPTFILE  = Console::$option['s'];
    Console::$RUNSCRIPT   = file(Console::$option['s']);
  }
}

if (isset(Console::$option['c'])) {
  if (is_array(Console::$option['c']))
    Console::$option['c'] = array_pop(Console::$option['c']);
  Console::$OUTCOLOR = Console::$colors[Console::$option['c']];
}

if (Console::$OUTCOLOR != -1)
  Console::$PS1 = Console::$PS1_COLOR;

if (isset(Console::$option['v'])) {
  if (is_array(Console::$option['v']))
    foreach (Console::$option['v'] as Console::$tmp)
      $GLOBALS[preg_replace('/=.*$/', '', Console::$tmp)] =
        preg_replace('/^[^=]+=/', '', Console::$tmp);
  else
    $GLOBALS[preg_replace('/=.*$/', '', Console::$option['v'])] =
      preg_replace('/^[^=]+=/', '', Console::$option['v']);
}

error_reporting(E_ALL);

if (isset(Console::$option['f'])) {
  if (is_array(Console::$option['f']))
    foreach (Console::$option['f'] as Console::$tmp)
      require_once(Console::$tmp);
  else
    require_once(Console::$option['f']);
}

Console::setup();

if (isset(Console::$option['q']))
  Console::$print = Console::$printnext = false;

Console::$welcome = <<<EOT

 _____  _______ _______ __ _______   ______ _______ _______ _______ ______ 
|     \|       |    |  |  |_     _| |   __ \   _   |    |  |_     _|      |
|  --  |   -   |       ||_| |   |   |    __/       |       |_|   |_|   ---|
|_____/|_______|__|____|    |___|   |___|  |___|___|__|____|_______|______|


          Press ctrl-d to reload, ctrl-c to quit, /h for help.


EOT;

if (Console::$INTERACTIVE)
  printf(Console::center(Console::$welcome));

Console::fork(Console::$pid1);

if (Console::$pid1 > 0) {
  // parent

  Console::$mem_usage = memory_get_usage(true)/1024/1024;

  while(true) {
    Console::readLine();
    Console::endCompletions();
    Console::$tmp_status  = explode(":", Console::getStatus());
    Console::$n           = Console::$tmp_status[0];
    Console::$last_time   = Console::$tmp_status[1];
    Console::$mem_usage   = Console::$tmp_status[2]/1024/1024;

    if (Console::$reboot || Console::$die)
      break;
  }
  pcntl_waitpid(Console::$pid1, Console::$status);

  if (Console::$die)
    exit();

  echo "\n";
  pcntl_exec(array_shift($argv), $argv);
} else {
  // child
  while(true) {
    if (! Console::$reboot)
      Console::fork(Console::$pid2);
    else
      exit();

    if (Console::$pid2 > 0) {
      // child
      pcntl_waitpid(Console::$pid2, Console::$status);
      Console::$mem_usage = memory_get_usage(true);
      Console::sendStatus(
        Console::$n . ":" . Console::$last_time . ":" . Console::$mem_usage);
    } else {
      // grandchild
      Console::$pid3 = posix_getpid();

      Console::serviceCompletionRequests();

      pcntl_signal(SIGCHLD, SIG_IGN);

      Console::$start_time = microtime(true);

      eval(Console::emitTryCatch());

      if (Console::$tmp_result === false) {
        Console::printFatal(error_get_last());
      } elseif (Console::$result !== Console::$no_result) {
        Console::$last_time = microtime(true) - Console::$start_time;
        Console::printResult(Console::$result);
      }

      Console::$mem_usage = memory_get_usage(true);

      if (posix_getpid() != Console::$pid3) {
        // great-grandchild: could be here if eval'ed code called fork(), for
        // instance.
        exit(0);
      }

      Console::sendStatus(
        Console::$n . ":" . Console::$last_time . ":" . Console::$mem_usage);

      posix_kill(posix_getppid(), SIGTERM);
      pcntl_signal_dispatch();
    }
  }
}
