<?php
// vim: ft=php

error_reporting(0);
// Parse .htaccess files

$init = function() {
  $setini = function($line) {
    $patt  = '/^\s*php_(?:admin_)?value\s+([^\s]+)\s+([^\s].*)$/';

    if (! preg_match($patt, trim($line), $m))
      return;

    $k = $m[1];
    $v = $m[2];

    if ($v[0] == '"' && $v[strlen($v)-1] == '"')
      $v = substr($v, 1, strlen($v)-2);

    ini_set($k, $v);
  };

  $option = getopt('c:f:i:j:Jv:hHqs:z');
  $depth  = count(explode("/", getcwd())) - 1;

  if (! isset($option['H'])) {
    for ($i=0; $i<$depth; $i++) {
      $file = str_repeat("../", $i).".htaccess";

      if (! file_exists($file))
        continue;

      $lines = file($file);

      foreach ($lines as $line)
        $setini($line);
    }
  }

  if (isset($option['i'])) {
    if (! is_array($option['i']))
      $option['i'] = array($option['i']);
    foreach($option['i'] as $set)
      $setini(preg_replace('/^([^=]+)=/', 'php_value $1 ', $set));
  }
};

$init();

unset($init);

ini_set('error_log', '');

putenv('WIGWAM_CONSOLE=true');

use Wigwam\ClassLoader;
use Wigwam\Console\Console;
use Wigwam\Console\ConsoleCommand;

if (! class_exists('Wigwam\\ClassLoader'))
  require_once('Wigwam/ClassLoader.php');

if (isset(Console::$option['z']))
  Console::$INTERACTIVE = false;

Console::$HISTFILE_S = $_SERVER['HOME']."/.console.php.history.session";

Console::setup();

Console::$option = getopt('c:f:i:j:Jv:hHqs:z');

if (isset(Console::$option['h'])) {
  ConsoleCommand::h('');
  exit();
}

if (isset(Console::$option['J']))
  Console::$HISTORY = false;

if (isset(Console::$option['s'])) {
  if (is_array(Console::$option['s']))
    Console::$option['s'] = array_pop(Console::$option['s']);
  if (file_exists(Console::$option['s'])) {
    Console::$SCRIPTFILE  = Console::$option['s'];
    Console::$RUNSCRIPT   = file(Console::$option['s']);
  }
}

if (isset(Console::$option['c'])) {
  if (is_array(Console::$option['c']))
    Console::$option['c'] = array_pop(Console::$option['c']);
  Console::$OUTCOLOR = Console::$colors[Console::$option['c']];
}

if (Console::$OUTCOLOR != -1)
  Console::$PS1 = Console::$PS1_COLOR;

if (isset(Console::$option['j'])) {
  if (is_array(Console::$option['j']))
    Console::$option['j'] = array_pop(Console::$option['j']);
  Console::$HISTPREFIX = Console::$option['j'];
}

if (isset(Console::$option['v'])) {
  if (is_array(Console::$option['v']))
    foreach (Console::$option['v'] as Console::$tmp)
      $GLOBALS[preg_replace('/=.*$/', '', Console::$tmp)] =
        preg_replace('/^[^=]+=/', '', Console::$tmp);
  else
    $GLOBALS[preg_replace('/=.*$/', '', Console::$option['v'])] =
      preg_replace('/^[^=]+=/', '', Console::$option['v']);
}

if (isset(Console::$option['f'])) {
  if (is_array(Console::$option['f']))
    foreach (Console::$option['f'] as Console::$tmp)
      require_once(Console::$tmp);
  else
    require_once(Console::$option['f']);
}

if (! Console::$INTERACTIVE)
  exit();

Console::setup();

if (isset(Console::$option['q']))
  Console::$print = Console::$printnext = false;

echo "\nConsole ready. Press ctrl-d to reload, ctrl-c to quit, /h for help.\n\n";

Console::fork(Console::$pid1);

if (Console::$pid1 > 0) {
  // parent
  while(true) {
    Console::readLine();
    Console::endCompletions();
    Console::getStatus();
    if (Console::$reboot)
      break;
  }
  pcntl_waitpid(Console::$pid1, Console::$status);
  echo "\n";
  pcntl_exec(array_shift($argv), $argv);
} else {
  // child
  while(true) {
    if (! Console::$reboot)
      Console::fork(Console::$pid2);
    else
      exit();

    if (Console::$pid2 > 0) {
      // child
      pcntl_waitpid(Console::$pid2, Console::$status);
      Console::sendStatus("ok");
    } else {
      // grandchild
      Console::$pid3 = posix_getpid();

      Console::serviceCompletionRequests();

      pcntl_signal(SIGCHLD, SIG_IGN);

      if (eval(Console::getLine()) === false)
        Console::printFatal(error_get_last());

      if (posix_getpid() != Console::$pid3) {
        // great-grandchild: could be here if eval'ed code called fork(), for
        // instance.
        exit(0);
      }

      Console::sendStatus("ok");

      posix_kill(posix_getppid(), SIGTERM);
      pcntl_signal_dispatch();
    }
  }
}
