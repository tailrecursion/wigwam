console(1) -- A Read-Eval-Print-Loop (REPL) for the PHP language.
=================================================================

## SYNOPSIS

`console` [`-hHqz`] [`-c` <color>] [`-f` <file>] [`-i` <key=val>] [`-p` <file>]
[`-s` <file>] [`-v` <var=val>]

## DESCRIPTION

**Console** provides a REPL environment for the PHP language.

## OPTIONS

  * `-A`:
    Don't preload tab-completion cache---console starts up a little faster but
    tab completion is a little slower.
  * `-c` <color>:
    Return value print color (default is `cyan`). Choices are: `black`, `red`,
    `green`, `yellow`, `blue`, `magenta`, `cyan`, `white`, and `none`. Bold
    colors can be specified as `bold-`<color>. Specify `none` to disable
    colored output.
  * `-f` <file>:
    Require <file> before starting REPL.
  * `-h`:
    Print usage info and exit.
  * `-H`:
    Don't parse `.htaccess` files at startup.
  * `-i` <key=val>:
    Set PHP configuration option <key> to <val>.
  * `-p` <file>:
    Require <file> before loading console's classloader.
  * `-q`:
    Don't echo the result after evaling each expression.
  * `-s` <file>:
    Run console commands in <file> before interactive REPL.
  * `-v` <var=val>:
    Set <$var> to <val> globally in REPL environment.
  * `-z`:
    Run script files but don't start interactive REPL.

  Multiple `-f`, `-i`, `-p`, and `-v` options may be specified on the same
  command line.

## THE REPL ENVIRONMENT

The following commands are available inside the REPL environment:

  * `/d` <thing>:
    Get the doc comment for the <thing>.
  * `/e` [<file>]:
    Append session history to <file> and open in editor. If <file> is not
    specified then the file specified with the `-s` option will be used.
  * `/f` <file>:
    Load <file> via php's `require()`.
  * `/h`:
    Print this help info.
  * `/hh`:
    Print expression history.
  * `/p` <expr>:
    Toggle echoing the result just for this expression.
  * `/pp`:
    Toggle echoing the result of each eval.
  * `/pager` [<cmd>]:
    Pipe results through shell command <cmd> when displaying them. If no <cmd>
    is provided, the current pager command is removed.
  * `/q` <expr>:
    Evaluate <expr> but don't display the result.
  * `/x` <expr>:
    Evaluate <expr> and examine result (print full `var_export` output).

## HISTORY EXPANSION

History expansion is pretty standard. `$$` is the previous expression. `$0`,
`$1`, `$2`, ... expand to expression number 0, 1, 2, etc. Using a negative
index, like `$-4` for example, refers to the 4th previous expression. Note
that `$$` and `$-1` are equivalent.

## PROGRAMMATIC REPL ACCESS

Most of the REPL functionality can be modified or accessed programmatically
via the `Console` and `ConsoleCommand` classes.

  * `Console::$DEBUG`:
    Extra debugging info is pronted when this static property is `true`.
  * `Console::$PAGER`:
    Shell command to pipe results through (e.g. "tee /tmp/foo | more").
  * `Console::$PS1`:
    This public static property controls how the console prompt is presented.
    It may contain either a `printf(`3`)` style format string or a callback
    function. The format string or function should accept 3 arguments: history
    number, elapsed time, and memory used. The callback function should return
    the string to be used as the prompt.
  * `Console::$PS2`:
    This public static property is a string to be used for the secondary
    (continued line) prompt.
  * `Console::$printers`:
    This is an array whose keys are class names and whose values are functions.
    When the console displays an object of the given class, the function will
    be called with one argument---the class name. The function should return the
    string to be printed. If a printer is not found for the object's class, then
    the printer for its parent class is used, if one exists, and so on.
  * `ConsoleCommand::add(`string <$name>, callable <$f>`)`:
    Add a command to the REPL, accessible via `/`<$name>. The <$f> callback
    should accept one argument, the rest of the command line, and it should
    return a string (which will be evaluated) or nothing.
  * `ConsoleCommand::doit(`string <$line>`)`:
    Programmatically run the REPL command <$line>.

## FILES

Console looks for the php file `~/.consolerc.php`. If it finds it then that
file is loaded via `require_once` when the REPL is started. Additionally, the
REPL can be configured via `.htaccess` files, as usual with the Apache web
server.

The console requires a scratch file `~/.console.php.scratch` for the pager if
a pager is specified, and a history file `~/.console.php.history` if expression
history is used.

## COPYRIGHT

Wigwam is Copyright (c) 2012 Micha Niskin

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
